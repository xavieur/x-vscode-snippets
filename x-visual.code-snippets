{
  // Xavier Visual Studio Code Snippets
  "yargs command": {
      "prefix": "x-yargs1",
      "body": [
          "yargs.command({",
          "    command: '${1:cmd}',",
          "    describe: '${2:txt}',",
          "    builder: {",
          "        ${3:option}: {",
          "            describe: '${4:txt}',",
          "            demandOption: true,",
          "            type: 'string'",
          "        },",
          "        ${5:option}: {",
          "            describe: '${6:example}',",
          "            demandOption: true,",
          "            type: 'string'",
          "        }",
          "    },",
          "    handler(argv) {",
          "        addNote(argv.${3:option}, argv.${5:option})",
          "    }",
          "})"
      ],
      "description": "yargs command",
      "scope": "javascript,javascriptreact"
  },
  "yargs parse": {
      "prefix": "x-yargs2",
      "body": [
          "yargs.parse()"
      ],
      "description": "yargs parse",
      "scope": "javascript,javascriptreact"
  },
  "react npm/yarn": {
      "prefix": "x-help-npm-yarn",
      "body": [
          "// para generar el package.json",
          "npm init",
          "yarn init",
          "",
          "// para instalar los paquetes de package.json",
          "npm install ",
          "yarn [install]",
          "",
          "// para instalar [globalmente] paquetes como devDependencies",
          "npm install [-g] <paquete> [ --save-dev | -D ]",
          "yarn [global] add <paquete> [ --dev | -D ]",
          "",
          "// para instalar [globalmente] paquetes como dependencies",
          "npm uninstall [-g] <paquete>",
          "yarn [global] remove <paquete>",
          "",
          "// para listar [globalmente] paquetes [mostrando lo m√≠nimo]",
          "npm list [-g] [--depth=0]",
          "yarn [global] list [--depth=0]",
          "",
          "// para ejecutar un script de package.json",
          "npm run <nombre_del_script_en_package.json> ",
          "yarn run <nombre_del_script_en_package.json> ",
          "",
          "// ver paquetes desactualizados [globalmente]",
          "npm outdated [-g] ",
          "yarn outdated",
          "",
          "// actualizar [globalmente] un [paquete] o todos",
          "npm update [-g] [<paquete>]",
          "yarn [global] upgrade [<paquete>]",
          "yarn upgrade-interactive",
          "",
          "// auditar paquetes [reparar]",
          "npm audit [fix]",
          "yarn audit"
      ],
      "description": "react npm/yarn"
  },
  "mongoose model": {
      "prefix": "x-help-mongoose-model",
      "body": [
          "const mongoose = require('mongoose')",
          "const validator = require('validator')",
          "",
          "const User = mongoose.model('User', {",
          "    name: {",
          "        type: String,",
          "        required: true,",
          "        trim: true",
          "    },",
          "    email: {",
          "        type: String,",
          "        required: true,",
          "        trim: true,",
          "        lowercase: true,",
          "        validate(value) {",
          "            if (!validator.isEmail(value)) {",
          "                throw new Error('Email is invalid')",
          "            }",
          "        }",
          "    },",
          "    password: {",
          "        type: String,",
          "        required: true,",
          "        minlength: 7,",
          "        trim: true,",
          "        validate(value) {",
          "            if (value.toLowerCase().includes('password')) {",
          "                throw new Error('Password cannot contain \"password\"')",
          "            }",
          "        }",
          "    },",
          "    age: {",
          "        type: Number,",
          "        default: 0,",
          "        validate(value) {",
          "            if (value < 0) {",
          "                throw new Error('Age must be a postive number')",
          "            }",
          "        }",
          "    }",
          "})",
          "",
          "module.exports = User"
      ],
      "description": "mongoose model"
  },
  "routers/resouce.js": {
      "prefix": "x-routers-resource-js",
      "body": [
          "const express = require('express')",
          "const router = new express.Router()",
          "const ${1:Resource} = require('../models/${2:resource}')",
          "",
          "router.post('/${2:resource}s', async (req, res) => {",
          "    const ${2:resource} = new ${1:Resource}(req.body)",
          "",
          "    try {",
          "        await ${2:resource}.save()",
          "        res.status(201).send(${2:resource})",
          "    } catch (e) {",
          "        res.status(400).send(e)",
          "    }",
          "})",
          "",
          "router.get('/${2:resource}s', async (req, res) => {",
          "    try {",
          "        const ${2:resource}s = await ${1:Resource}.find({})",
          "        res.send(${2:resource}s)",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "router.get('/${2:resource}s/:id', async (req, res) => {",
          "    const _id = req.params.id",
          "",
          "    try {",
          "        const ${2:resource} = await ${1:Resource}.findById(_id)",
          "",
          "        if (!${2:resource}) {",
          "            return res.status(404).send()",
          "        }",
          "",
          "        res.send(${2:resource})",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "router.patch('/${2:resource}s/:id', async (req, res) => {",
          "    const updates = Object.keys(req.body)",
          "    const allowedUpdates = ['${3:resource_field_1}', '${4:resource_field_2}']",
          "    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))",
          "",
          "    if (!isValidOperation) {",
          "        return res.status(400).send({ error: 'Invalid updates!' })",
          "    }",
          "",
          "    try {",
          "        const ${2:resource} = await ${1:Resource}.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })",
          "",
          "        if (!${2:resource}) {",
          "            return res.status(404).send()",
          "        }",
          "",
          "        res.send(${2:resource})",
          "    } catch (e) {",
          "        res.status(400).send(e)",
          "    }",
          "})",
          "",
          "router.delete('/${2:resource}s/:id', async (req, res) => {",
          "    try {",
          "        const ${2:resource} = await ${1:Resource}.findByIdAndDelete(req.params.id)",
          "",
          "        if (!${2:resource}) {",
          "            res.status(404).send()",
          "        }",
          "",
          "        res.send(${2:resource})",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "module.exports = router"
      ],
      "description": "routers/resource.js",
      "scope": "javascript,javascriptreact"
  },
  "ejs out": {
      "prefix": "x-ejsout",
      "body": [
          "<%= $0 %>"
      ],
      "description": "ejs out"
  },
  "ejs include": {
      "prefix": "x-ejsinc",
      "body": [
          "<%- include(\"./partials/${1:filename}.ejs\") %>$0"
      ],
      "description": "ejs include"
  },
  "ejs": {
      "prefix": "x-ejs",
      "body": [
          "<% ${1:code} %>$0"
      ],
      "description": "ejs"
  },
  "html form": {
      "prefix": "x-form",
      "body": [
          "<form action=\"api/${1:resources}\" method=\"POST\">",
          "  <label for=\"${2:name}\">${3:label}:</label>",
          "  <input type=\"text\" id=\"${2:name}\" name=\"${2:name}\" required>",
          "  <label for=\"${4:name}\">${5:label}:</label>",
          "  <input type=\"text\" id=\"${4:name}\" name=\"${4:name}\" required>",
          "  <label for=\"${6:name}\">${7:label}:</label>",
          "  <textarea id=\"${6:name}\" name=\"${6:name}\" required></textarea>",
          "  <button>${8:Submit}</button>",
          "</form>"
      ],
      "description": "html form"
  },
  "css normalize": {
      "prefix": "x-css-normalize",
      "body": [
          "* {",
          "    padding: 0;",
          "    margin: 0;",
          "    box-sizing: border-box;",
          "}",
          "",
          "a{",
          "    text-decoration: none;",
          "}",
          "",
          "ul{",
          "    list-style-type: none;",
          "}"
      ],
      "description": "css normalize"
  },
  "mongoose connection": {
      "prefix": "x-db-mongoose-js",
      "body": [
          "const mongoose = require('mongoose')",
          "",
          "mongoose.connect(process.env.MONGODB_URL, {",
          "    useNewUrlParser: true,",
          "    useUnifiedTopology: true,",
          "    useCreateIndex: true,",
          "    useFindAndModify: false",
          "})"
      ],
      "description": "mongoose connection",
      "scope": "javascript,javascriptreact"
  },
  "express app get": {
      "prefix": "x-express-app-get",
      "body": [
          "app.get('/${1:path}', (req, res) => {",
          "  res.render('${1:path}', { title: '${2:title}' });",
          "});"
      ],
      "description": "express app get",
      "scope": "javascript,javascriptreact"
  },
  "express app get all": {
      "prefix": "x-express-app-get-all",
      "body": [
          "app.get('/${1:path}', async (req, res) => {",
          "    try {",
          "        const ${2:model}s = await ${3:Model}.find({})",
          "        res.render('index', { title: '${4:title}', ${2:model}s });",
          "    } catch (error) {",
          "        res.render('index', {title: '${4:title}', ${2:model}s: []})",
          "    }",
          "})"
      ],
      "description": "express app get all",
      "scope": "javascript,javascriptreact"
  },
  "express app init": {
      "prefix": "x-express-app-init",
      "body": [
          "const express = require('express')",
          "",
          "require('../db/mongoose')",
          "const ${1:Model} = require('../models/${2:model}') // optional",
          "const ${3:router}Router = require('../routers/${3:router}')",
          "",
          "const port = process.env.PORT",
          "",
          "// express app",
          "const app = express()",
          "",
          "// listen for requests",
          "app.listen(port, () => {",
          "  console.log(`Server listening to port \\${port}`)",
          "})",
          "",
          "// register view engine",
          "app.set('view engine', 'ejs')",
          "",
          "// middleware & static files",
          "app.use(express.static('public'))",
          "app.use(express.urlencoded({ extended: true }))",
          "",
          "// web server",
          "app.get('/', (req, res) => {",
          "  res.render('index', { title: 'Home' })",
          "});",
          "$0",
          "",
          "// api's",
          "app.use(express.json())",
          "app.use('/api', ${3:router}Router)",
          "",
          "// 404 page",
          "app.use((req, res) => {",
          "  res.status(404).render('404', { title: '404' })",
          "})"
      ],
      "description": "express app init",
      "scope": "javascript,javascriptreact"
  },
  "models/resource.js": {
      "prefix": "x-models-resource",
      "body": [
          "const mongoose = require('mongoose')",
          "",
          "const ${1:Resource} = mongoose.model('${1:Resource}', new mongoose.Schema({",
          "   ${2:field}: {",
          "        type: String,",
          "        ${3:required: true,}",
          "        ${4:default: '${5:txt}',}",
          "        ${6:enum: [],}",
          "        ${7:${8|trim,lowercase,minlength,maxlength|}: true,}",
          "        ${9:match: ${10:RegExp}},",
          "        validate(value) {",
          "            if (!condition) {",
          "                throw new Error('Condition not met')",
          "            }",
          "        }",
          "    },",
          "    field: {",
          "        type: Number,",
          "        required: true,",
          "        default: 0,",
          "        min: 0,",
          "        max: 0,",
          "        enum: [],",
          "        validate(value) {",
          "            if (!condition) {",
          "                throw new Error('Condition not met')",
          "            }",
          "        }",
          "    },",
          "    field: {",
          "        type: Date,",
          "        required: true,",
          "        default: false,",
          "        min: 0,",
          "        max: 0,",
          "        validate(value) {",
          "            if (!condition) {",
          "                throw new Error('Condition not met')",
          "            }",
          "        }",
          "    },",
          "    field: {",
          "        type: Boolean,",
          "        required: true,",
          "        default: false,",
          "        validate(value) {",
          "            if (!condition) {",
          "                throw new Error('Condition not met')",
          "            }",
          "        }",
          "    }",
          "}))",
          "",
          "module.exports = ${1:Resource}"
      ],
      "description": "models/resource.js",
      "scope": "javascript,javascriptreact"
  },
  "css init": {
      "prefix": "x-css-init",
      "body": [
          "* {",
          "    padding: 0;",
          "    margin: 0;",
          "    box-sizing: border-box;",
          "}",
          "",
          "body {",
          "    background-color: lightgrey;",
          "    color: black;",
          "    width: 80%;",
          "    margin: auto;",
          "}",
          "",
          "ul {",
          "    list-style-type: none;",
          "}",
          "",
          "nav li {",
          "    display: inline-block;",
          "    margin-left: 16px;",
          "}",
          "",
          "header{",
          "    margin: 16px;",
          "    display: flex;",
          "    justify-content: space-between;",
          "}",
          "",
          "a {",
          "    text-decoration: none;",
          "}",
          "",
          "label, input, textarea {",
          "    display: block;",
          "    margin-bottom: 8px;",
          "}",
          "",
          "main{",
          "    background-color: lightcyan;",
          "    border-radius: 16px;",
          "    margin: 16px;",
          "    padding: 48px;",
          "}",
          "",
          "footer{",
          "    margin: 16px;",
          "}",
          "",
          ".post {",
          "    margin: 16px;",
          "    padding: 24px;",
          "    background-color: white;",
          "    border-radius: 16px;",
          "}"
      ],
      "description": "css 0",
      "scope": "css, scss"
  },
  "middleware/auth.js": {
      "prefix": "x-middleware-auth",
      "body": [
          "const jwt = require('jsonwebtoken')",
          "const User = require('../models/user')",
          "",
          "const auth = async (req, res, next) => {",
          "    try {",
          "        const token = req.header('Authorization').replace('Bearer ', '')",
          "        const decoded = jwt.verify(token, 'secret-key')",
          "        const user = await User.findOne({ _id: decoded._id, 'tokens.token': token })",
          "",
          "        if (!user) {",
          "            throw new Error()",
          "        }",
          "",
          "        req.token = token",
          "        req.user = user",
          "        next()",
          "    } catch (e) {",
          "        res.status(401).send({ error: 'Please authenticate.' })",
          "    }",
          "}",
          "",
          "module.exports = auth"
      ],
      "description": "middleware/auth.js",
      "scope": "javascript,javascriptreact"
  },
  "models/user.js": {
      "prefix": "x-models-user",
      "body": [
          "const mongoose = require('mongoose')",
          "const validator = require('validator')",
          "const bcrypt = require('bcryptjs')",
          "const jwt = require('jsonwebtoken')",
          "",
          "const userSchema = new mongoose.Schema({",
          "    name: {",
          "        type: String,",
          "        required: true,",
          "        trim: true",
          "    },",
          "    email: {",
          "        type: String,",
          "        unique: true,",
          "        required: true,",
          "        trim: true,",
          "        lowercase: true,",
          "        validate(value) {",
          "            if (!validator.isEmail(value)) {",
          "                throw new Error('Email is invalid')",
          "            }",
          "        }",
          "    },",
          "    password: {",
          "        type: String,",
          "        required: true,",
          "        minlength: 7,",
          "        trim: true,",
          "        validate(value) {",
          "            if (value.toLowerCase().includes('password')) {",
          "                throw new Error('Password cannot contain \"password\"')",
          "            }",
          "        }",
          "    },",
          "    age: {",
          "        type: Number,",
          "        default: 0,",
          "        validate(value) {",
          "            if (value < 0) {",
          "                throw new Error('Age must be a postive number')",
          "            }",
          "        }",
          "    },",
          "    tokens: [{",
          "        token: {",
          "            type: String,",
          "            required: true",
          "        }",
          "    }]",
          "})",
          "",
          "userSchema.methods.generateAuthToken = async function () {",
          "    const user = this",
          "    const token = jwt.sign({ _id: user._id.toString() }, 'secret-key')",
          "",
          "    user.tokens = user.tokens.concat({ token })",
          "    await user.save()",
          "",
          "    return token",
          "}",
          "",
          "userSchema.statics.findByCredentials = async (email, password) => {",
          "    const user = await User.findOne({ email })",
          "",
          "    if (!user) {",
          "        throw new Error('Unable to login')",
          "    }",
          "",
          "    const isMatch = await bcrypt.compare(password, user.password)",
          "",
          "    if (!isMatch) {",
          "        throw new Error('Unable to login')",
          "    }",
          "",
          "    return user",
          "}",
          "",
          "// Hash the plain text password before saving",
          "userSchema.pre('save', async function (next) {",
          "    const user = this",
          "",
          "    if (user.isModified('password')) {",
          "        user.password = await bcrypt.hash(user.password, 8)",
          "    }",
          "",
          "    next()",
          "})",
          "",
          "const User = mongoose.model('User', userSchema)",
          "",
          "module.exports = User"
      ],
      "description": "models/user.js",
      "scope": "javascript,javascriptreact"
  },
  "routers/user.js": {
      "prefix": "x-routers-user",
      "body": [
          "const express = require('express')",
          "const User = require('../models/user')",
          "const auth = require('../middleware/auth')",
          "const router = new express.Router()",
          "",
          "router.post('/users', async (req, res) => {",
          "    const user = new User(req.body)",
          "",
          "    try {",
          "        await user.save()",
          "        const token = await user.generateAuthToken()",
          "        res.status(201).send({ user, token })",
          "    } catch (e) {",
          "        res.status(400).send(e)",
          "    }",
          "})",
          "",
          "router.post('/users/login', async (req, res) => {",
          "    try {",
          "        const user = await User.findByCredentials(req.body.email, req.body.password)",
          "        const token = await user.generateAuthToken()",
          "        res.send({ user, token })",
          "    } catch (e) {",
          "        res.status(400).send()",
          "    }",
          "})",
          "",
          "router.post('/users/logout', auth, async (req, res) => {",
          "    try {",
          "        req.user.tokens = req.user.tokens.filter((token) => {",
          "            return token.token !== req.token",
          "        })",
          "        await req.user.save()",
          "",
          "        res.send()",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "router.post('/users/logoutAll', auth, async (req, res) => {",
          "    try {",
          "        req.user.tokens = []",
          "        await req.user.save()",
          "        res.send()",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "router.get('/users/me', auth, async (req, res) => {",
          "    res.send(req.user)",
          "})",
          "",
          "router.get('/users/:id', async (req, res) => {",
          "    const _id = req.params.id",
          "",
          "    try {",
          "        const user = await User.findById(_id)",
          "",
          "        if (!user) {",
          "            return res.status(404).send()",
          "        }",
          "",
          "        res.send(user)",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "router.patch('/users/:id', async (req, res) => {",
          "    const updates = Object.keys(req.body)",
          "    const allowedUpdates = ['name', 'email', 'password', 'age']",
          "    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))",
          "",
          "    if (!isValidOperation) {",
          "        return res.status(400).send({ error: 'Invalid updates!' })",
          "    }",
          "",
          "    try {",
          "        const user = await User.findById(req.params.id)",
          "",
          "        updates.forEach((update) => user[update] = req.body[update])",
          "        await user.save()",
          "",
          "        if (!user) {",
          "            return res.status(404).send()",
          "        }",
          "",
          "        res.send(user)",
          "    } catch (e) {",
          "        res.status(400).send(e)",
          "    }",
          "})",
          "",
          "router.delete('/users/:id', async (req, res) => {",
          "    try {",
          "        const user = await User.findByIdAndDelete(req.params.id)",
          "",
          "        if (!user) {",
          "            return res.status(404).send()",
          "        }",
          "",
          "        res.send(user)",
          "    } catch (e) {",
          "        res.status(500).send()",
          "    }",
          "})",
          "",
          "module.exports = router"
      ],
      "description": "routers/user.js",
      "scope": "javascript,javascriptreact"
  },
  "wrap html": {
      "prefix": "x-wrap-html",
      "body": [
          "<${1:div}>$TM_SELECTED_TEXT</${1:div}>$0"
      ],
      "description": "wrap html"
  },
  "wrap ejs": {
      "prefix": "x-wrap-ejs",
      "body": [
          "<${1:%} $TM_SELECTED_TEXT ${1:%}>$0"
      ],
      "description": "wrap html"
  },
  "wrap x": {
      "prefix": "x-wrap-x",
      "body": [
          "${1}$TM_SELECTED_TEXT${2}$0"
      ],
      "description": "wrap x"
  },
  "wrap snippet line": {
      "prefix": "x-wrap-s",
      "body": [
          "\"$TM_SELECTED_TEXT\","
      ],
      "description": "wrap snippet line"
  },
  "array forEach": {
      "prefix": "x-arr-forEach",
      "body": [
          "${1:array}.forEach((${2:item}${3:, ${4:index}})=>{",
          "  $0",
          "})"
      ],
      "description": "array forEach",
      "scope": "javascript,javascriptreact"
  },
  "array map": {
      "prefix": "x-arr-map",
      "body": [
          "${1:const ${2:newArray} =} ${3:array}.map((${4:item}${5:, ${6:index}})=>{",
          "  return ${7:newItem}",
          "})$0"
      ],
      "description": "array map",
      "scope": "javascript,javascriptreact"
  },
  "array filter": {
      "prefix": "x-arr-filter",
      "body": [
          "${1:const ${2:newArray} =} ${3:array}.filter((${4:item}${5:, ${6:index}})=>{",
          "  return ${7:key} === ${8:value}",
          "})$0"
      ],
      "description": "array map",
      "scope": "javascript,javascriptreact"
  },
  "array find": {
      "prefix": "x-arr-find",
      "body": [
          "${1:const ${2:newArray} =} ${3:array}.find((${4:item}${5:, ${6:index}})=>{",
          "  return ${7:key} === ${8:value}",
          "})$0"
      ],
      "description": "array find",
      "scope": "javascript,javascriptreact"
  },
  "array findIndex": {
      "prefix": "x-arr-findIndex",
      "body": [
          "${1:const ${2:i} =} ${3:array}.findIndex((${4:item}${5:, ${6:index}})=>{",
          "  return ${7:key} === ${8:value}",
          "})$0"
      ],
      "description": "array findIndex",
      "scope": "javascript,javascriptreact"
  },
  "array splice": {
      "prefix": "x-arr-splice",
      "body": [
          "${1:const ${2:newArray} =} ${3:array}.splice(${4:indexToInsert}, ${5:numberToDelete}, ${6:commaSeparatedNewItems})$0"
      ],
      "description": "array splice",
      "scope": "javascript,javascriptreact"
  },
  "array sort": {
      "prefix": "x-arr-sort",
      "body": [
          "${1:const ${2:arraySorted} =} ${3:array}.sort((${4:item}A, ${4:item}B)=> {",
          "    if (${4:item}A && ${4:item}B) {",
          "        return -1 // to keep",
          "    } else if (${4:item}A && ${4:item}B) {",
          "        return 1 // to swap",
          "    } else {",
          "        return 0",
          "    }",
          "})"
      ],
      "description": "array sort",
      "scope": "javascript,javascriptreact"
  },
  "arrow function": {
      "prefix": "x-f",
      "body": [
          "($1) => {",
          "    $0",
          "}"
      ],
      "description": "arrow function",
      "scope": "javascript,javascriptreact"
  },
  "html init": {
      "prefix": "x-html",
      "body": [
          "(header>h1)+(main>section)+footer"
      ],
      "description": "html init",
      "scope": "html"
  },
  "webpack": {
      "prefix": "x-webpack",
      "body": [
          "const path = require('path')",
          "",
          "module.exports = {",
          "    mode: 'development',",
          "    entry: {",
          "        ${1:index}: './src/${1:index}.js'",
          "    },",
          "    output: {",
          "        path: path.join(__dirname, 'public/js'),",
          "        filename: '[name].bundle.js'",
          "    },",
          "    module: {",
          "        rules: [{",
          "            test: /\\.js$/,",
          "            exclude: /node_modules/,",
          "            use: {",
          "                loader: 'babel-loader',",
          "                options: {",
          "                    presets: ['@babel/preset-env', '@babel/preset-react']",
          "                }",
          "            }",
          "        },",
          "        {",
          "            test: /\\.(sa|sc|c)ss$/,",
          "            use: [",
          "                'style-loader',",
          "                'css-loader',",
          "                {",
          "                    loader: 'postcss-loader',",
          "                    options: {",
          "                        postcssOptions: {",
          "                            plugins: [",
          "                                'postcss-preset-env'",
          "                            ]",
          "                        }",
          "                    }",
          "                },",
          "                'sass-loader'",
          "            ]",
          "        }]",
          "    },",
          "    devtool: 'eval-cheap-module-source-map',",
          "    devServer: {",
          "        contentBase: path.join(__dirname, 'public'),",
          "        port: 9000,",
          "        open: true",
          "    }",
          "}"
      ],
      "description": "webpack",
      "scope": "javascript,javascriptreact"
  },
  "react index.js": {
      "prefix": "x-react-index-js",
      "body": [
          "import React from 'react'",
          "import ReactDOM from 'react-dom'",
          "import ${1:App} from './routers/${1:App}'",
          "import 'normalize.css/normalize.css'",
          "import './sass/style.scss'",
          "",
          "ReactDOM.render(<${1:App} />, document.querySelector('#appRoot'))"
      ],
      "description": "react index.js",
      "scope": "javascript,javascriptreact"
  },
  "react Router.js": {
      "prefix": "x-react-Router-js",
      "body": [
          "import React from 'react'",
          "import { BrowserRouter, Route, Switch} from 'react-router-dom'",
          "import ${5:ComponentA} from '../components/${5:ComponentA}'",
          "import ${7:ComponentB} from '../components/${7:ComponentB}'",
          "import ${10:ComponentC} from '../components/${10:ComponentC}'",
          "import ${11:Component404} from '../components/${11:Component404}'",
          "${3:import ${4:ComponentHeader} from '../components/${4:ComponentHeader}'}",
          "",
          "const ${1:Router} = () => (",
          "    <BrowserRouter>",
          "        <div>",
          "            ${2:<${4:ComponentHeader} />}",
          "            <Switch>",
          "                <Route path='/' component={${5:ComponentA}} exact={true} />",
          "                <Route path='/${6:path}' component={${7:ComponentB}} />",
          "                <Route path='/${8:path}/:${9:param}' component={${10:ComponentC}} />",
          "                <Route component={${11:Component404}} />",
          "            </Switch>",
          "        </div>",
          "    </BrowserRouter>",
          ")",
          "",
          "export default ${1:Router}"
      ],
      "description": "react Router.js",
      "scope": "javascript,javascriptreact"
  },
  "react router Header.js": {
      "prefix": "x-react-router-Header-js",
      "body": [
          "import React from 'react'",
          "import { NavLink } from 'react-router-dom'",
          "",
          "const ${1:Header} = () => (",
          "    <header>",
          "        <h1>${2:Title}</h1>",
          "        <NavLink to='/' activeClassName='${3:active-class-name}' exact={true}>${4:Home}</NavLink>",
          "        <NavLink to='/${5:path}' activeClassName='${3:active-class-name}'>${6:Menu item}</NavLink>",
          "        <NavLink to='/${7:path}' activeClassName='${3:active-class-name}'>${8:Menu item}</NavLink>",
          "    </header>",
          ")",
          "",
          "export default ${1:Header}"
      ],
      "description": "react router Header.js",
      "scope": "javascript,javascriptreact"
  },
  "react modal": {
      "prefix": "x-react-Modal-js",
      "body": [
          "import React from 'react'",
          "import Modal from 'react-modal';",
          "Modal.setAppElement('#${2:appRoot}')",
          "",
          "const ${1:ComponentModal} = (props) => {",
          "    return (",
          "        <Modal",
          "            isOpen={!!props.${4:object}}",
          "            onRequestClose={props.${7:undefineObject}}",
          "            contentLabel=\"${3:title}\"",
          "            closeTimeoutMS={100}",
          "            className=\"${8:modal}\"",
          "            ariaHideApp={true}",
          "        >",
          "            <h3>${3:title}</h3>",
          "            {!!props.${4:object} && <p>{props.${4:object}.${5:field1}}</p>}",
          "            {!!props.${4:object} && <p>{props.${4:object}.${6:field2}}</p>}",
          "            <button className=\"button\" onClick={props.${7:undefineObject}}>${9:Ok}</button>",
          "        </Modal>",
          "    )",
          "}",
          "",
          "export default ${1:ComponentModal}"
      ],
      "description": "react modal",
      "scope": "javascript,javascriptreact"
  },
  "help git": {
      "prefix": "x-help-git",
      "body": [
          "git help [<command>] // documentation",
          "git <command> --help // the same",
          "",
          "// to start with",
          "git config --global user.name \"Xavier Valera\"",
          "git config --global user.email xavier@xavier.com",
          "git config --global color.ui true",
          "mkdir <folder>; cd <folder>; git init || git init <folder>; cd <folder>;",
          "",
          "git config --global|--local|--system --list // to see config at that scope",
          "git config --global|--local|--system -e // to see/edit config at that scope",
          "git config --global core.editor \"code -w\"",
          "git config --global --unset core.editor",
          "git config <section.key> // to see",
          "git config <section.key> value // to edit - mac, single quotes; windows, double quotes",
          "git config --global core.autocrlf input // to fix newline characters on OSX and Linux",
          "git config --global core.autocrlf true // to fix newline characters on Windows",
          "",
          "git config --global alias.mylog \"log --graph\" // to use \"git mylog\"",
          "git config --global alias.st status // to use \"git st\"",
          "",
          "HEAD = pointer to the current commit",
          "HEAD^ = pointer to the parent commit or HEAD~1",
          "HEAD^2 = pointer to the second parent commit (from branch merged) if merge",
          "HEAD^^ = pointer to the grandparent commit or HEAD~2",
          "",
          "git init [folder: project name] // turn a folder into a local git",
          "git clone <url> [custom-folder-name] // download a remote git (create dir + git checkout master(build working directory from .git)) + git remote add origin <repository url>",
          "",
          "git status // check it",
          "git status -s | --short // compact view",
          "",
          "git add <file1> <file2> ...// track a new file and stage it, make it staged (ready to be committed, in the staging area, index)",
          "git add '*.txt' // search wildcards -> add all text files in the whole project (also double quotes)",
          "git add -A // add All the current directory (-A = --all): new and modified!",
          "git add *.txt",
          "git add folder/",
          "git add folder/*.txt",
          "",
          "git mv <file> <file> // moves a file in working directory and index",
          "",
          "git rm --cached <file> // to untrack it to add it in .gitignore! Removes it from version control but preserves it locally (delete sha ~ reset historic index)",
          "git reset [HEAD] <file> // make it unstaged (not to be committed, out of the staging area, index) (undo add ~ undo new sha ~ reset current index)",
          "git reset [commit] // Undoes all commits after [commit], preserving changes locally",
          "git reset --hard [commit] // Discards all history and changes back to the specified commit",
          "git checkout -- <file> // blow away all changes since last commit",
          "",
          "git reset with commits moves branch references",
          "git reset [--mixed] <commit> // moves the branch that HEAD (pointer to the current branch reference) is pointing to. Commit could be HEAD~ for instance.",
          "git reset --soft <commit> // moves branch. reset into staging: git reset --soft HEAD^ (undo last commit)",
          "git reset --mixed <commit> // moves branch, reset into working directory. Staging index empty",
          "git reset --hard <commit> // moves branch, reset index and working directory. (undo commit and changes)",
          "",
          "git reset <file> == git reset --mixed HEAD <file> // updates index to HEAD version of that file",
          "git reset --mixed <commit> <file> // updates index to that commit version of that file",
          "",
          "git rm '*.txt' // remove actual file from disk and stage the removal. Deleted and untracked. Commit after.",
          "git rm -r folder_to_remove // remove actual folder recursively. Commit after.",
          "",
          "git rm --cached <file> // delete file from the repository",
          "git rm <file> // delete file from local file system and the repository",
          "edit .gitignore > git add it > git commit // to untrack it from now on",
          "",
          "git mv [file-original] [file-renamed] // Changes the file name and prepares it for commit",
          "",
          "git commit // to commit the files added as they are now",
          "git commit -a // to commit tracked files (modified and deleted), but not new files!",
          "git commit -m \"brief message\" // to commit permanently",
          "git commit -a -m \"Commit all tracked files with a message at the same time\"",
          "git commit -am \"brief message\" // to commit permanently and auto-remove deleted files if not used 'git rm'",
          "git commit --amend -m \"update last commit\" // this message overrides the older",
          "git reset --soft HEAD^ // cancel commit \"before last\"",
          "",
          "git log // from the current commit or latest of specified branch",
          "git log -<number> // last number commits",
          "git log <commit> // from that commit or branch specified",
          "git log --summary // history",
          "git log --stat // stats about insertions and <deletions></deletions>",
          "git log -p // to see patch",
          "git log --author=\"Xavier\" // to filter commits by author",
          "git log --grep=\"unit tests\" // to filter commits by its message content",
          "git log --graph --oneline <branch> <branch> // in timestamp order",
          "git log --since=1.day.ago --until=1.minute.ago",
          "git log --since=1.month.ago --until=2.weeks.ago // relative",
          "git log --since=2000-01-01 --until=2012-12-21 // absolute",
          "alias gl=\"git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"",
          "",
          "git blame <file> --date short // to see who did what",
          "git shortlog -s -n // to see number of commits by authors",
          "",
          "git diff [commit] // diff between working directory and staging area (unstaged differences) (HEAD is commit by default)",
          "git diff HEAD^^ --stat // grandparent of lastest commit (log options available)",
          "git diff HEAD~5 // five commits ago",
          "git diff HEAD^..HEAD // second most recent vs most recent",
          "git reset <file> // reset changes in staging area",
          "git diff --staged // diff between staging area and a commit in repositoy (staged differences) Also: git diff --cached",
          "git reset --hard // reset changes in working directory and in staging area",
          "git diff <oldCommit> <newCommit> // diff between two commits in repository: HEAD or branches allowed",
          "git diff <oldCommit>..<newCommit> // diff between two commits in repository: HEAD or branches allowed",
          "git diff --name-only SHA1 SHA2 // the same showing files only",
          "git diff [--no-index] <file1> <file2> // --no-index to specify not using index if both controlled by git",
          "git show [commit] // diff between a commit and its parent",
          "",
          "git stash [save \"message\"] // to save modified tracked files and staged changes (staging and non-staging area)",
          "git stash [save \"message\"] --keep-index // to avoid stashing staged changes",
          "git stash [save \"message\"] --include-untracked // to include untracked files",
          "git stash apply [stash@{2}] // to apply last one or that one from the list on whatever branch",
          "git stash pop [stash@{2}] // git stash apply + git stash drop of last or that stash",
          "git stash list [<LogOptions>] // to see stored stashes with git log options, for exemple, --stat",
          "git stash show [stash@{1}] [<LogOptions>] // to see last or that stash, for exemple, --patch",
          "git stash drop [stash@{0}] // to remove last one or that one from the list",
          "git stash clear // to drop all",
          "git stash branch <branch> [stash@{3}] // makes a branch where it was created, I presume",
          "git stash show -p [stash@{0}] | git apply -R // unstash last one or that one",
          "",
          "git remote add <remote repo name> <repository url> // to add a remote GitHub repository",
          "git remote add origin https://github.com/try-git/try_git.git",
          "git remote show <remote repo name> // show info",
          "git remote show origin",
          "git remote -v // check remote repo names",
          "git remote rm <remote repo name> // or \"remove\"",
          "git remote rename <old> <new>",
          "",
          "git push -u <remote repo name> <local? branch> // -u for remembering parametres and use 'git push' only",
          "git push -u origin master",
          "git push <remote repo name> :<branch> // delete remote branch (locally it's git branch -d/-D <branch>)",
          "git remote prune <remote repo name> // to clean up all deleted, stale, remote branches",
          "",
          "git tag // list all tags",
          "git tag -a <name> -m \"version 5.0\" // add tag to the most recent commit. Ex: name could be v5.0",
          "git tag -a <name> -m \"version 5.0\" [<commit>] // to specify an old commit",
          "git tag -d <name> // delete one tag",
          "git push --tags // to push them",
          "",
          "git fetch // updates all of all remotes",
          "git fetch <remote repo name> // updates all of the local copies of every branch for the remote",
          "git fetch origin",
          "",
          "git pull origin master // = git fetch origin + git merge master origin/master",
          "// to pull down to our local branch any changes made in the remote repository",
          "",
          "git stash // to stash changes without committing them before pull. Temporarily stores all modified tracked files.",
          "git stash apply // to re-apply the previously not committed stashed changes after your pull",
          "",
          "git checkout <commit> // to go to that commit -> that make it the head",
          "git checkout -- <files> // it ensures you don't check out a branch accidentally",
          "git reflog // to reference log commit id's",
          "git checkout master // to go to the last comit of that branch",
          "",
          "git checkout <brach|commit>",
          "git checkout -- <target> // change back to how they were at the last commit, '--' to avoid a branch named the same (optional)",
          "git checkout -- octocat.txt // get rid of all the changes since the last commit for octocat.txt",
          "git checkout <branch> // switch to branch, change HEAD to point to the new branch ref, index (staging area) is populated with the snapshot of that commit and the contents of the index is copied into working directory.",
          "git checkout -b <branch> // create and switch to branch: git checkout {git branch <branch>}",
          "",
          "git checkout (commit) <file> // doesn't move head and updates index and working directory to that commit version of that file",
          "",
          "git branch // view local branches",
          "git branch -r // view remote branches",
          "git branch -a // view all branches: local and remote. Also: git branch --all",
          "git branch <name> [<commit>]// create a branch at that commit",
          "git branch -m <old branch name> <new branch name> // move names",
          "git branch -M <old branch name> <new branch name> // if <newbranch> exists",
          "git branch -D <branch name> // delete a branch without checking (local?)",
          "git branch -d <branch name> // delete a branch checking if all has been merged  (local?)",
          "",
          "git push <remote repo name> --delete <branch> // delete remote branch",
          "",
          "git gc // garbage collection: to delete manually unreachable commits (without branch label or reachable from one)",
          "",
          "git merge <branch> <branch> // merge branches into the currently checked out branch we are, creating a new commit for that branch",
          "",
          "git mergetool // to have some help to do the merge but *.orig file to delete!",
          "",
          "git merge-base <commitA> <commitB> // common base",
          "",
          "git merge --abort // restore files before git merge is done: delete <<<< head |||| merged common ancestors >>>> master",
          "",
          "git rm -f --cached --ignore-unmatch `git ls-files -i --exclude-standard` // after modifying .gitignore",
          "",
          "// plumbing commands",
          "echo ‚ÄúApple Pie‚Äù | git hash-object ‚Äîstdin -w",
          "git count-objects",
          "git cat-file -t <digest|tagname> // type",
          "git cat-file -p <digest|tagname> // blob, tree, commit, tag",
          "git show-ref <branch|tag> // show the content of all refs whose name is that word",
          ""
      ],
      "description": "help git"
  },
  "snippet field": {
      "prefix": "x-snippet-field",
      "body": [
          "\\${${1:number}:$TM_SELECTED_TEXT\\}"
      ],
      "description": "snippet field"
  },
  "snippet choice": {
      "prefix": "x-snippet-choice",
      "body": [
          "\\${${1:number}|$TM_SELECTED_TEXT|\\}"
      ],
      "description": "snippet choice"
  },
  "snippet init": {
      "prefix": "x-snippet-init",
      "body": [
          "\"${1:description}\": {",
          "  \"prefix\": \"${2:prefix-to-type}\",",
          "  \"body\": [",
          "    $0",
          "  ],",
          "  \"description\": \"${1:description}\"",
          "}"
      ],
      "description": "snippet init"
  },
  "axios resource A": {
      "prefix": "x-axios-resource-A",
      "body": [
          "const res = await axios({",
          "  method:${1:methodString},",
          "  url:${2:urlString},",
          "  data:${3:dataObject},",
          "  headers:${4:headersObject}",
          "})"
      ],
      "description": "axios resource A",
      "scope": "javascript,javascriptreact"
  },
  "axios resource B": {
      "prefix": "x-axios-resource-B",
      "body": [
          "const res = await axios.${1:method}(${2:urlString},${3|dataObject,${1:configObject}|},${4:configObject})"
      ],
      "description": "axios resource B",
      "scope": "javascript,javascriptreact"
  },
  "axios interceptors B": {
      "prefix": "x-axios-interceptors-request",
      "body": [
        "axios.interceptors.request.use((config) => {",
        "    ${1:code}",
        "    return config",
        "}, (error) => {",
        "    Promise.reject(error)",
        "})"
      ],
      "description": "axios interceptors B",
      "scope": "javascript,javascriptreact"
    },
    "axios defaults": {
      "prefix": "x-axios-defaults",
      "body": [
        "axios.defaults.headers.common['${1:Authorization}'] = `Bearer ${${2:jsonwebtoken}}`",
        "axios.defaults.baseURL = ${3:urlString}"
      ],
      "description": "axios defaults",
      "scope": "javascript,javascriptreact"
    },
    "axios script": {
      "prefix": "x-axios-script",
      "body": [
        "<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>"
      ],
      "description": "axios script",
      "scope": "javascript,javascriptreact"
    },
    "axios instance": {
      "prefix": "x-axios-instance",
      "body": [
        "const ${1:axiosInstance} = axios.create(${2:configObject})"
      ],
      "description": "axios instance",
      "scope": "javascript,javascriptreact"
    },
    "luxon script": {
      "prefix": "x-luxon-script",
      "body": [
        "<script src=\"https://cdn.jsdelivr.net/npm/luxon@1.25.0/build/global/luxon.min.js\"></script>"
      ],
      "description": "luxon script",
      "scope": "html"
    },
    "help luxon": {
      "prefix": "x-help-luxon",
      "body": [
        "x - luxon - datetime - create",
        "",
        "const DateTime = luxon.DateTime",
        "const Interval = luxon.Interval",
        "const Duration = luxon.Duration",
        "const dt =",
        "DateTime.local()",
        "DateTime.local(2017, 5, 15, 8, 30)",
        "DateTime.fromObject({ day: 22, hour: 12, zone: 'America/Los_Angeles' })",
        "DateTime.fromISO(\"2017-05-15T08:30:00\")",
        "",
        "x - luxon - datetime - read",
        "",
        "dt.year",
        "dt.month",
        "dt.day",
        "dt.second",
        "dt.weekday",
        "dt.zoneName",
        "dt.daysInMonth",
        "",
        "x - luxon - datetime - print",
        "",
        "dt.valueOf()",
        "dt.toObject()",
        "dt.toISO()",
        "dt.setLocale('fr').toLocaleString(DateTime.DATETIME_FULL)",
        "",
        "x - luxon - datetime - edit",
        "",
        "dt.plus({})",
        "dt.minus({})",
        "dt.startOf('month')",
        "dt.endOf('day')",
        "dt.set({})",
        "",
        "x - luxon - duration - create",
        "",
        "const dur = Duration.fromObject({ hours: 2, minutes: 7 })",
        "",
        "x - luxon - duration - read",
        "",
        "dur.hours",
        "dur.minutes",
        "dur.seconds",
        "",
        "x - luxon - duration - print",
        "",
        "dur.as('seconds')",
        "dur.toObject()",
        "dur.toISO()",
        "",
        "x - luxon - interval",
        "",
        "i = Interval.fromDateTimes(dt1, dt2)",
        "i.length()",
        "i.length('years')",
        "i.contains(dt)",
        "",
        "i.toISO()"
      ],
      "description": "help luxon"
    },
    "help heroku": {
      "prefix": "x-help-heroku",
      "body": [
        "heroku -v",
        "",
        "heroku help",
        "",
        "> security:",
        "",
        "heroku login [-i] // to sign in [in the terminal]",
        "heroku logout // clears local login",
        "heroku keys:add // to upload id_rsa.pub",
        "",
        "> create app:",
        "",
        "heroku create your-awesome-app // directly adding git URL into our remotes",
        "",
        "heroku git:remote -a your-awesome-app // to add the heroku remote to local repository if heroku app created before",
        "",
        "> To look out:",
        "",
        "-- scripts at package.json:",
        "\"scripts\": {\"start\": \"node src/app.js\"} // since heroku executes: \"npm run start\"",
        "-- environmental variables: ",
        "const port = process.env.PORT",
        "-- use relative paths:",
        "Delete up to localhost:3000 on URL fetches",
        "",
        "> Do git add & commit & push to the remote's master branch",
        "",
        "git push heroku master",
        "git push heroku localbranch:master",
        "",
        "> config environmental variables",
        "",
        "heroku config // list ",
        "heroku config:set GITHUB_USERNAME=joesmith TIMES=2 NPM_CONFIG_PRODUCTION=false YARN_PRODUCTION=false",
        "heroku config:unset GITHUB_USERNAME",
        "",
        "> visit the app at the URL generated by its app name",
        "",
        "heroku open",
        "",
        "> logs",
        "",
        "heroku logs --tail // continually stream logs",
        "heroku logs -s app --tail // filtering source",
        "",
        "> local development",
        "",
        "heroku local web // using .env",
        "",
        "> remote access",
        "",
        "heroku run bash"
      ],
      "description": "help heroku"
    },
    "form file": {
      "prefix": "x-form-file",
      "body": [
        "<form action=\"${1:/api/users/me}/${2:avatar}\" method=\"post\" enctype=\"multipart/form-data\">",
        "  <input type=\"file\" name=\"${2:avatar}\" />",
        "  <button>${3:Enviar}</button>",
        "</form>"
      ],
      "description": "form file",
      "scope": "html"
    },
    "multer config": {
      "prefix": "x-multer-config",
      "body": [
        "const upload${1:Document} = multer({",
        "    dest: ${2:pathStringRelativeToTheProjectIfNotUsingBuffer},",
        "    ${3:limits: {",
        "        fileSize: ${4:numberOfBytes}",
        "    \\},}",
        "    ${5:fileFilter(req, file, cb) {",
        "        if (!file.originalname.match(/\\.(${6:pdf|doc|docx})$/)) {",
        "            return cb(new Error('${7:File must be a pdf or word document.}'))",
        "        \\}",
        "        cb(undefined, true) // accept the upload",
        "    \\}}",
        "})"
      ],
      "description": "multer config",
      "scope": "javascript,javascriptreact"
    },
    "multer router post": {
      "prefix": "x-multer-router-post",
      "body": [
        "router.post('/users/me/${1:document}', auth, upload${2:Document}.single('${1:document}'), async (req, res) => {",
        "    // req.file.buffer = await sharp(req.file.buffer).resize({width:250, height:250}).png().toBuffer()",
        "    req.user.${1:document} = req.file.buffer",
        "    await req.user.save()",
        "    res.send()",
        "}, (error, req, res, next) => {",
        "    res.status(404).send({ error: error.message })",
        "})"
      ],
      "description": "multer router post",
      "scope": "javascript,javascriptreact"
    },
    "multer router get": {
      "prefix": "x-multer-router-get",
      "body": [
        "router.get('/users/:id/${1:document}', async (req, res) => {",
        "    try {",
        "        const user = await User.findById(req.params.id)",
        "",
        "        if (!user || !user.${1:document}) {",
        "            throw new Error()",
        "        }",
        "",
        "        res.set('Content-Type', '${2:image/png}')",
        "        res.send(user.${1:document})",
        "    } catch (error) {",
        "        res.status(404).send()",
        "    }",
        "})"
      ],
      "description": "multer router get",
      "scope": "javascript,javascriptreact"
    },
    "multer on schema": {
      "prefix": "x-multer-schema",
      "body": [
        "${1:document}: {",
        "    type: Buffer",
        "}"
      ],
      "description": "multer on schema"
    },
    "multer router delete": {
      "prefix": "x-multer-router-delete",
      "body": [
        "router.delete('/users/me/${1:document}', auth, async (req, res) => {",
        "    req.user.${1:document} = undefined",
        "    await req.user.save()",
        "    res.send()",
        "})"
      ],
      "description": "multer router delete",
      "scope": "javascript,javascriptreact"
    },
    "multer model delete": {
      "prefix": "x-multer-model-delete",
      "body": [
        "${1:user}Schema.methods.toJSON = function () {",
        "    const ${1:user} = this",
        "    const ${1:user}Object = ${1:user}.toObject()",
        " ",
        "    delete ${1:user}Object.password",
        "    delete ${1:user}Object.tokens",
        "    delete ${1:user}Object.${2:document}",
        "",
        "    return ${1:user}Object",
        "}"
      ],
      "description": "multer model delete",
      "scope": "javascript,javascriptreact"
    },
    "log tagged": {
      "prefix": "x-log-tagged",
      "body": [
        "console.log('$1', $1)$0"
      ],
      "description": "log tagged",
      "scope": "javascript,javascriptreact"
    },
    "redux store": {
      "prefix": "x-redux-store",
      "body": [
        "const store = createStore((state = { ${1:stateField}: 0 }, action) => {",
        "    switch (action.type) {",
        "        case '${2:ACTION}':",
        "            return {",
        "                count: state.${1:stateField} + action.${3:actionField}",
        "            }",
        "        default:",
        "            return state",
        "    }",
        "})"
      ],
      "description": "redux store",
      "scope": "javascript,javascriptreact"
    },
    "redux subscribe": {
      "prefix": "x-redux-subscribe",
      "body": [
        "const unsubscribe = store.subscribe(() => {",
        "    console.log(store.getState())",
        "})",
        "",
        "unsubscribe()"
      ],
      "description": "redux subscribe",
      "scope": "javascript,javascriptreact"
    },
    "redux action generator": {
      "prefix": "x-redux-action-generator",
      "body": [
        "const ${1:stateFieldAction} = ({ ${2:actionField} = ${3:defaultValue} } = {}) => ({",
        "    type: '${4:ACTION}',",
        "    ${2:actionField}",
        "})"
      ],
      "description": "redux subscribe",
      "scope": "javascript,javascriptreact"
    },
    "media all": {
      "prefix": "x-media-all",
      "body": [
        "/* X-Small devices (portrait phones, less than 576px) */",
        "",
        "${1:.grid{display:grid;grid-gap: 0 30px;grid-template-columns: repeat(1, 1fr)\\}}",
        "",
        "/* Small devices (landscape phones, 576px and up) */",
        "@media screen and (min-width: 576px) {",
        "  ${2:.grid{grid-template-columns: repeat(3, 1fr);\\}}",
        "}",
        "",
        "/* Medium devices (tablets, 768px and up) */",
        "@media screen and (min-width: 768px) {",
        "  ${3:.grid{grid-template-columns: repeat(4, 1fr);\\}}",
        "}",
        "",
        "/* Large devices (desktops, 992px and up) */",
        "@media screen and (min-width: 992px) {",
        "    ${4:.grid{grid-template-columns: repeat(5, 1fr);\\}}",
        "}",
        "",
        "/* X-Large devices (large desktops, 1200px and up)} */",
        "@media screen and (min-width: 1200px) {",
        "    ${5:.grid{grid-template-columns: repeat(6, 1fr);\\}}",
        "}",
        "",
        "/* XX-Large devices (larger desktops, 1400px and up) */",
        "@media screen and (min-width: 1400px) {",
        "    ${6:.grid{grid-template-columns: repeat(7, 1fr);\\}}",
        "}"
      ],
      "description": "media all"
    },
    "media small": {
      "prefix": "x-media-small",
      "body": [
        "/* Small devices (landscape phones, 576px and up) */",
        "@media screen and (min-width: 576px) {",
        "  ${1:.grid{grid-template-columns: repeat(3, 1fr);\\}}",
        "}"
      ],
      "description": "media small"
    },
    "media medium": {
      "prefix": "x-media-medium",
      "body": [
        "/* Medium devices (tablets, 768px and up) */",
        "@media screen and (min-width: 768px) {",
        "  ${1:.grid{grid-template-columns: repeat(4, 1fr);\\}}",
        "}"
      ],
      "description": "media medium"
    },
    "media large": {
      "prefix": "x-media-large",
      "body": [
        "/* Large devices (desktops, 992px and up) */",
        "@media screen and (min-width: 992px) {",
        "  ${1:.grid{grid-template-columns: repeat(5, 1fr);\\}}",
        "}"
      ],
      "description": "media large"
    },
    "media x large": {
      "prefix": "x-media-x-large",
      "body": [
        "/* X-Large devices (large desktops, 1200px and up)} */",
        "@media screen and (min-width: 1200px) {",
        "  ${1:.grid{grid-template-columns: repeat(6, 1fr);\\}}",
        "}"
      ],
      "description": "media large"
    },
    "media xx large": {
      "prefix": "x-media-xx-large",
      "body": [
        "/* XX-Large devices (larger desktops, 1400px and up) */",
        "@media screen and (min-width: 1400px) {",
        "  ${1:.grid{grid-template-columns: repeat(7, 1fr);\\}}",
        "}"
      ],
      "description": "media xx large"
    },
    "link favicon": {
      "prefix": "x-favicon",
      "body": [
        "<link rel=\"icon\" href=\"/img/favicon.ico\" type=\"image/x-icon\">"
      ],
      "description": "link favicon",
      "scope": "html"
    }
}